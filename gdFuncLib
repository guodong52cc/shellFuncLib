# Guodong's Shell Function Libraries
# Adaptation to Linux(bash) and MacOS(zsh)
# How to use:
#   export [this file]
# Eg:
#   export .gdFunctionLib 

function color()
{
    case $1 in
    black) aaa=30;;
    red) aaa=31;;
    green) aaa=32;;
    yellow) aaa=33;;
    blue) aaa=34;;
    purple) aaa=35;;
    skyblue) aaa=36;;
    white) aaa=37;;
    help) echo -e "usage: color [black/red/green/yellow/blue/purple/skybule/white] \"[color message]\" \"[nomal message]\""
    echo -e "Eg:\t color red \"Erro:\" \"please check!\"";;
    *) color red "Erro parameters,check please!";;
    esac
    echo -e "\033[$aaa"m"$2\033[0m$3"
}

function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function gitfunc {
	if [ -e $GFL_FOLDER/config.yaml ];then
		eval $(parse_yaml $GFL_FOLDER/config.yaml)
	else
		color red "Erro: Please confirm if the file exists : " "$GFL_FOLDER/config.yaml"
		return 1
	fi

	if [[ $1 == "-a" ]];then
		color yellow "All git souce file :"
		color yellow "No.\tName"
		gitfile=$(ls -al $GFL_FOLDER/git | awk 'NR>3{print $9}' | grep -v "git.mod")
		if [ ! $gitfile ];then
			echo "None file"
		else
			echo $gitfile | while read line
			do
			i=0
			color yellow "$((i+1))" "\t$line" 
			done
		fi
	elif [[ $1 == "update" ]];then
	    if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
			env=${HOME}/.zshrc
		elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
			env=${HOME}/.bashrc
		else
			echo "Now only support bash and zsh shell."
		fi

		gitname=$(parse_yaml $GFL_FOLDER/config.yaml | grep "type=\"git\"" | awk -F '_' '{print $1}')
		gitfile=$(ls -al $GFL_FOLDER/git | awk 'NR>3{print $9}' | grep -v "git.mod")

		gitExt=$(echo $gitfile | grep -xv "$gitname")
		if [ ! $gitEx ];then
			echo $gitExt | while read line
			do
			rm $GFL_FOLDER/git/$line
			done
			echo "Git file check over"
		else
			echo "Git file check done"
		fi

		if [ -e $GFL_FOLDER/git/git.mod ];then
			echo $gitname | while read line
			do
			cat $GFL_FOLDER/git/git.mod | sed -e "s/gitpush/$line"push"/g" -e "s/git_gitDirectory/"$line"_"$line"Directory/g" > $GFL_FOLDER/git/$line
			echo "Add $GFL_FOLDER/git/$line ... Done"			
			if grep -q "source $GFL_FOLDER/git/$line" $env;then
				echo "Already exist : source $GFL_FOLDER/git/$line."
			else
				echo "source $GFL_FOLDER/git/$line" >> $env
				echo "Add source $GFL_FOLDER/git/$line ... Done"
			fi
			source $GFL_FOLDER/git/$line
			done
		else
			color red "Cannot find git.mod"
			return 1
		fi
	elif [[ $1 == "reupdate" ]];then
	    if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
			env=${HOME}/.zshrc
		elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
			env=${HOME}/.bashrc
		else
			echo "Now only support bash and zsh shell."
		fi

		gitname=$(parse_yaml $GFL_FOLDER/config.yaml | grep "type=\"git\"" | awk -F '_' '{print $1}')
		gitfile=$(ls -al $GFL_FOLDER/git | awk 'NR>3{print $9}' | grep -v "git.mod")

		if [ ! $gitEx ];then
			echo $gitfile | while read line
			do
			rm $GFL_FOLDER/git/$line
			echo "rm $GFL_FOLDER/git/$line"
			done
			echo "All clean"
		else
			echo "All done"
		fi

		if [ -e $GFL_FOLDER/git/git.mod ];then
			echo $gitname | while read line
			do
			cat $GFL_FOLDER/git/git.mod | sed -e "s/gitpush/$line"push"/g" -e "s/git_gitDirectory/"$line"_gitDirectory/g" > $GFL_FOLDER/git/$line
			echo "Add $GFL_FOLDER/git/$line ... Done"
			if grep -q "source $GFL_FOLDER/git/$line" $env;then
				echo "Already exist : source $GFL_FOLDER/git/$line."
			else
				echo "source $GFL_FOLDER/git/$line" >> $env
				echo "Add source $GFL_FOLDER/git/$line ... Done"
			fi
			source $GFL_FOLDER/git/$line
			done
		else
			color red "Cannot find git.mod"
			return 1
		fi
	elif [[ $1 == "help" ]];then
		echo "Usage : gitfunc [command]"
		echo "[command] :"
		echo -e "\t-a :\t\t List all git source file"
		echo -e "\tupdate :\t Check and update git command from config into git file"
		echo -e "\treupdate :\t Check rebuild and update git command from config into git file"
		echo -e "\thelp :\t\t Information for command gitfunc"
	elif [ ! $1 ];then
		color red "Miss options"
		gitfunc help
	else
		color red "Unsupported options !"
		gitfunc help
	fi
}

function ipv4()
{
	ifconfig | grep inet | grep -v inet6
}